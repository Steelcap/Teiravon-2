using System;
using System.Collections;
using Server;
using Server.Items;
using Server.Engines.Craft;
using Mat = Server.Engines.BulkOrders.BulkMaterialType;

namespace Server.Engines.BulkOrders
{
	[TypeAlias( "Scripts.Engines.BulkOrders.SmallFletcherBOD" )]
	public class SmallFletcherBOD : SmallBOD
	{
		public static double[] m_FletcherMaterialChances = new double[]
			{
				0.501953125, // None
				0.250000000, // Pine
				0.125000000, // Redwood
				0.062500000, // White Pine
				0.031250000, // Ashwood
				0.015625000, // Silver Birch
				0.007812500, // Yew
				0.005859375, // Black Oak
			};

		public int High( Mat mat )
		{
			return 2 + (3 * (int)mat);
		}

		public int Low( Mat mat )
		{
			return 3 * (int)mat;
		}

		public bool Check( int val )
		{
			int ours = ( AmountMax < 20 ? Low( Material ) : High( Material ) );

			return ( ours == val );
		}

		public bool Check( int min, int max )
		{
			int ours = ( AmountMax < 20 ? Low( Material ) : High( Material ) );

			return ( ours >= min && ours <= max );
		}

		private bool Check( Mat val )
		{
			return ( Material == val );
		}

		private bool Check( Mat start, Mat end )
		{
			return ( Material >= start && Material <= end );
		}

		public override int ComputeFame()
		{
			int bonus = 0;

			if ( RequireExceptional )
				bonus += 20;

			if ( Material >= BulkMaterialType.Pine && Material <= BulkMaterialType.SilverBirch )
				bonus += 20 * (1 + (int)(Material - BulkMaterialType.Pine));
			else if ( Material >= BulkMaterialType.Yew && Material <= BulkMaterialType.BlackOak )
				bonus += 40 * (1 + (int)(Material - BulkMaterialType.Yew));

			return 10 + Utility.Random( bonus );
		}

		public override int ComputeGold()
		{
			int bonus = 0;

			if ( RequireExceptional )
				bonus += 50;

			if ( Material >= BulkMaterialType.Pine && Material <= BulkMaterialType.SilverBirch )
				bonus += 25 * (1 + (int)(Material - BulkMaterialType.Pine));
			else if ( Material >= BulkMaterialType.Yew && Material <= BulkMaterialType.BlackOak )
				bonus += 50 * (1 + (int)(Material - BulkMaterialType.Yew));

			return 75 + Utility.Random( bonus );
		}

		public override ArrayList ComputeRewards()
		{
			if ( Type == null )
				return new ArrayList();

			bool ps5 = true, ps10 = true, ps15 = false, ps20 = false;
			
			if ( RequireExceptional )
			{
				ps5 = Check( High( Mat.WhitePine ), Low( Mat.Ashwood ) );
				ps10 = Check( High( Mat.Ashwood ), Low( Mat.SilverBirch ) );
				ps15 = Check( High( Mat.SilverBirch ), Low( Mat.Yew ) );
				ps20 = Check( High( Mat.BlackOak ) );
			}
			else
			{
				ps5 = Check( Mat.Yew );
			}
			

			ArrayList list = new ArrayList();
			
			if ( ps5 )
				list.Add( new PowerScroll( SkillName.Fletching, 105 ) );

			if ( ps10 )
				list.Add( new PowerScroll( SkillName.Fletching, 110 ) );

			if ( ps15 )
				list.Add( new PowerScroll( SkillName.Fletching, 115 ) );

			if ( ps20 )
				list.Add( new PowerScroll( SkillName.Fletching, 120 ) );

			return list;
		}

		public static SmallFletcherBOD CreateRandomFor( Mobile m )
		{
			SmallBulkEntry[] entries;
			bool useMaterials = Utility.RandomBool();
			BulkMaterialType material = BulkMaterialType.None;
			double theirSkill = m.Skills[SkillName.Fletching].Base;

			if ( useMaterials && theirSkill >= 40.1 )
				{
					for ( int i = 0; i < 20; ++i )
					{
						BulkMaterialType check = GetRandomMaterial( BulkMaterialType.Pine, m_FletcherMaterialChances );
						double skillReq = 0.0;

						switch ( check )
						{
							case BulkMaterialType.Pine: skillReq = 25.0; break;
							case BulkMaterialType.Redwood: skillReq = 35.0; break;
							case BulkMaterialType.WhitePine: skillReq = 45.0; break;
							case BulkMaterialType.Ashwood: skillReq = 55.0; break;
							case BulkMaterialType.SilverBirch: skillReq = 65.0; break;
							case BulkMaterialType.Yew: skillReq = 75.0; break;
							case BulkMaterialType.BlackOak: skillReq = 80.0; break;
						}

						if ( theirSkill >= skillReq )
						{
							material = check;
							break;
						}
					}
				}

			entries = SmallBulkEntry.Bows;

			if ( entries.Length > 0 )
			{
				int amountMax;

				if ( theirSkill >= 70.1 )
					amountMax = Utility.RandomList( 10, 15, 20, 20 );
				else if ( theirSkill >= 50.1 )
					amountMax = Utility.RandomList( 10, 15, 15, 20 );
				else
					amountMax = Utility.RandomList( 10, 10, 15, 20 );				

				double excChance = 0.0;

				if ( theirSkill >= 70.1 )
					excChance = (theirSkill + 80.0) / 200.0;

				bool reqExceptional = ( excChance > Utility.RandomDouble() );

				SmallBulkEntry entry = null;

				CraftSystem system = DefBowFletching.CraftSystem;

				for ( int i = 0; i < 150; ++i )
				{
					SmallBulkEntry check = entries[Utility.Random( entries.Length )];

					CraftItem item = system.CraftItems.SearchFor( check.Type );

					if ( item != null )
					{
						bool allRequiredSkills = true;
						double chance = item.GetSuccessChance( m, null, system, false, ref allRequiredSkills );

						if ( allRequiredSkills && chance >= 0.0 )
						{
							if ( reqExceptional )
								chance = item.GetExceptionalChance( system, chance, m );

							if ( chance > 0.0 )
							{
								entry = check;
								break;
							}
						}
					}
				}

				if ( entry != null )
					return new SmallFletcherBOD( entry, material, amountMax, reqExceptional );
			}

			return null;
		}

		private SmallFletcherBOD( SmallBulkEntry entry, BulkMaterialType material, int amountMax, bool reqExceptional )
		{
			this.Hue = 0x20;
			this.AmountMax = amountMax;
			this.Type = entry.Type;
			this.Number = entry.Number;
			this.Graphic = entry.Graphic;
			this.RequireExceptional = reqExceptional;
			this.Material = material;
		}

		[Constructable]
		public SmallFletcherBOD()
		{
			SmallBulkEntry[] entries;
			bool useMaterials;
			BulkMaterialType material;

			entries = SmallBulkEntry.Bows;

			if ( entries.Length > 0 )
			{
				int hue = 0x20;
				int amountMax = Utility.RandomList( 10, 15, 20 );

				useMaterials = Utility.RandomBool();

				if ( useMaterials )
					material = GetRandomMaterial( BulkMaterialType.Pine, m_FletcherMaterialChances );
				else
					material = BulkMaterialType.None;

				bool reqExceptional = Utility.RandomBool() || (material == BulkMaterialType.None);

				SmallBulkEntry entry = entries[Utility.Random( entries.Length )];

				this.Hue = hue;
				this.AmountMax = amountMax;
				this.Type = entry.Type;
				this.Number = entry.Number;
				this.Graphic = entry.Graphic;
				this.RequireExceptional = reqExceptional;
				this.Material = material;
			}
		}

		public SmallFletcherBOD( int amountCur, int amountMax, Type type, int number, int graphic, bool reqExceptional, BulkMaterialType mat )
		{
			this.Hue = 0x20;
			this.AmountMax = amountMax;
			this.AmountCur = amountCur;
			this.Type = type;
			this.Number = number;
			this.Graphic = graphic;
			this.RequireExceptional = reqExceptional;
			this.Material = mat;
		}

		public SmallFletcherBOD( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 0 ); // version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();
		}
	}
}