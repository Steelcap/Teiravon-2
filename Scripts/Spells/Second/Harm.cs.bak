using System;
using Server.Targeting;
using Server.Network;
using Server.Mobiles;
using Server.Engines.XmlSpawner2;
using Server.Items;

namespace Server.Spells.Second
{
	public class HarmSpell : Spell
	{
		private static SpellInfo m_Info = new SpellInfo(
				"Harm", "An Mani",
				SpellCircle.Second,
				212,
				Core.AOS ? 9001 : 9041,
				Reagent.Nightshade,
				Reagent.SpidersSilk
			);

		public HarmSpell( Mobile caster, Item scroll ) : base( caster, scroll, m_Info )
		{
		}

		public override void OnCast()
		{
            if (Caster is TeiravonMobile && ((TeiravonMobile)Caster).IsCleric() && ((TeiravonMobile)Caster).Faith == TeiravonMobile.Deity.Lloth)
                Caster.Target = new InternalLlothTarget(this);
            else
			    Caster.Target = new InternalTarget( this );
		}

		public override bool DelayedDamage{ get{ return false; } }

		public void Target( Mobile m )
		{
			if ( !Caster.CanSee( m ) )
			{
				Caster.SendLocalizedMessage( 500237 ); // Target can not be seen.
			}
            else if (CheckHSequence(m))
            {
                if (Caster is TeiravonMobile && (((TeiravonMobile)Caster).IsCleric() || ((TeiravonMobile)Caster).IsDarkCleric()) && ((TeiravonMobile)Caster).Faith != TeiravonMobile.Deity.None)
                {
                    TeiravonMobile Cleric = Caster as TeiravonMobile;

                    SpellHelper.Turn(Caster, m);

                    SpellHelper.CheckReflect((int)this.Circle, Caster, ref m);

                    if (m is TeiravonMobile && ((TeiravonMobile)m).m_CloakOfDarkness)
                        return;

                    double damage;
                    switch (Cleric.Faith)
                    {
                        case TeiravonMobile.Deity.Adalia:
                            {
                                damage = GetNewAosDamage(10, 1, 5, Caster.Player && m.Player);
                                SpellHelper.Damage(this, m, damage, 0, 0, 0, 0, 100);
                                m.Stam -= (int)damage;
                                m.FixedParticles(0x37B9, 10, 30, 5013, 1153, 4, EffectLayer.Waist);
                                m.PlaySound(0x470);
                            }
                            break;
                        case TeiravonMobile.Deity.Cultist:
                            {
                                damage = GetNewAosDamage(2,1,5, true);
                                SpellHelper.Damage(this, Caster, damage);
                                damage = GetNewAosDamage(20, 1, 10, true);
                                SpellHelper.Damage(this, m, damage, 20, 20, 20, 20, 20);

                                m.FixedParticles(0x37C3, 10, 30, 5013, 137, 4, EffectLayer.Waist);
                                Caster.FixedParticles(0x37C3, 10, 30, 5013, 137, 4, EffectLayer.Waist);
                                m.PlaySound(0x44E);
                            }
                            break;
                        case TeiravonMobile.Deity.Gruumsh:
                            {
                                int hpMissing = (int)((Caster.HitsMax - Caster.Hits) * .2);
                                damage = GetNewAosDamage(hpMissing, 1, 5, Caster.Player && m.Player);
                                SpellHelper.Damage(this, m, damage, 0, 100, 0, 0, 0);

                                Caster.FixedParticles(0x36FE, 10, 30, 5013, 137, 4, EffectLayer.Waist);
                                m.PlaySound(0x056);
                            }
                            break;
                        case TeiravonMobile.Deity.Kamalini:
                            {
                                damage = GetNewAosDamage(22, 1, 5, Caster.Player && m.Player);
                                if (!m.InRange(Caster, 4))
                                    damage *= 0.25; // 1/4 damage at > 4 tile range
                                else if (!m.InRange(Caster, 2))
                                    damage *= 0.50; // 1/2 damage at 2 tile range
                                
                                SpellHelper.Damage(this, m, damage, 0, 0, 100, 0, 0);
                                Caster.Heal((int)damage);
                                Caster.PrivateOverheadMessage(MessageType.Spell, 495, false, damage.ToString(), Caster.NetState);

                                Caster.FixedParticles(0x373A, 10, 30, 5013, 157, 4, EffectLayer.Waist);
                                m.FixedParticles(0x374A, 10, 30, 5013, 157, 4, EffectLayer.Waist);
                                m.PlaySound(0x4B2);

                            }
                            break;
                        case TeiravonMobile.Deity.Kinarugi:
                            {
                                damage = GetNewAosDamage(0, 1, 3, Caster.Player && m.Player);
                                int duration = GetNewAosDamage(2, 1, 3, Caster.Player && m.Player);
                                Timer m_Timer = new KinTimer(Caster, m, duration, (int)damage);
                                m_Timer.Start();

                                m.LocalOverheadMessage(MessageType.Spell, 250, false, duration.ToString());
                                m.FixedParticles(0x3789, 10, 30, 5013, 1888, 2, EffectLayer.Waist);
                                m.PlaySound(0x4B2);
                            }
                            break;
                        case TeiravonMobile.Deity.Lloth:
                            {
                                damage = GetNewAosDamage(10, 1, 5, Caster.Player && m.Player);

                                TavWebbing webbing = XmlAttach.FindAttachmentOnMobile(m, typeof(TavWebbing), "web") as TavWebbing;

                                if (webbing != null)
                                {
                                    webbing.Expiration = TimeSpan.FromSeconds(3);
                                    webbing.DoWebbing();
                                }
                                else
                                {
                                    TavWebbing newweb = new TavWebbing(5);
                                    newweb.Name = "web";
                                    XmlAttach.AttachTo(m, newweb);
                                }
                                int sound = Utility.RandomMinMax(0x133, 0x136);
                                int web = Utility.RandomMinMax(3811, 3814);
                                Caster.MovingParticles(m, web, 12, 5, false, false, 0x377a, 0x377a, 0x027);
                                SpellHelper.Damage(this, m, damage, 50, 0, 0, 50, 0);
                                Caster.PlaySound(0x21D);
                                m.PlaySound(sound);

                            }
                            break;
                        case TeiravonMobile.Deity.Narindun:
                            {
                                SlayerEntry atkSlayer = SlayerGroup.GetEntryByName(SlayerName.DaemonDismissal);
                                int val = atkSlayer.Slays(m) ? 25 : 15;
                                damage = GetNewAosDamage(val, 1, 5, Caster.Player & m.Player);

                                SpellHelper.Damage(this, m, damage, 0, 0, 50, 0, 50);
                                m.FixedParticles(0x374A, 10, 30, 5013, 1153, 2, EffectLayer.Waist);
                                m.PlaySound(0x0FC);
                            }
                            break;
                        case TeiravonMobile.Deity.Saerin:
                            {
                                int rock = Utility.RandomMetalHue();
                                m.FixedParticles(0x2565, 15, 15, 5013, rock, 1, EffectLayer.Waist);
                                damage = GetNewAosDamage(15, 1, 5, Caster.Player & m.Player);
                                SpellHelper.Damage(this, m, damage, 100, 0, 0, 0, 0);
                                int sound = Utility.RandomMinMax(0x3B8, 0x3BE);
                                ResistanceMod mod = new ResistanceMod(ResistanceType.Physical, -15);
                                m.AddResistanceMod(mod);
                                m.PlaySound(sound);
                                SaerTimer timer = new SaerTimer(m, mod);
                                timer.Start();
                                if (m.PhysicalResistance <= 0)
                                {
                                    m.Animate(21, 5, 1, false, false, 0);
                                    m.Freeze(TimeSpan.FromSeconds(.5));
                                }
                            }
                            break;
                        case TeiravonMobile.Deity.Talathas:
                            {
                                BaseWeapon weap = Caster.Weapon as BaseWeapon;
                                Caster.Weapon.OnSwing(Caster, m);
                                Caster.NextCombatTime = DateTime.Now;
                                int effect = weap is Fists ? 0x36FE : weap.ItemID;
                                m.FixedParticles(effect, 10, 30, 5013, 2360, 2, EffectLayer.Waist);
                            }
                            break;
                        case TeiravonMobile.Deity.Valar:
                            {
                                string name = Utility.Random(100).ToString();
                                StatMod themmod = new StatMod(StatType.Dex, "ValarDrain", (int)(m.Dex * -.33), TimeSpan.FromSeconds(15));
                                StatMod castmod = new StatMod(StatType.Dex, "ValarDrain", (int)(m.Dex * .33), TimeSpan.FromSeconds(15));
                                m.AddStatMod(themmod);
                                Caster.AddStatMod(castmod);
                                damage = GetNewAosDamage(15, 1, 5, Caster.Player & m.Player);
                                SpellHelper.Damage(this, m, damage, 0, 0, 0, 50, 50);

                                m.FixedParticles(0x374A, 10, 30, 5013, 2364, 3, EffectLayer.Waist);
                                m.MovingParticles(Caster, 0x36E4, 10, 10, false, false, 2367, 3, 0x035,0x36FE,0x035,0);
                                m.PlaySound(0x456);
                            }
                            break;
                    }
                }
                else
                {

                    SpellHelper.Turn(Caster, m);

                    SpellHelper.CheckReflect((int)this.Circle, Caster, ref m);

                    double damage;

                    if (Core.AOS)
                    {
                        damage = GetNewAosDamage(17, 1, 5, Caster.Player && m.Player);
                    }
                    else
                    {
                        damage = Utility.Random(1, 15);

                        if (CheckResisted(m))
                        {
                            damage *= 0.75;

                            m.SendLocalizedMessage(501783); // You feel yourself resisting magical energy.
                        }

                        damage *= GetDamageScalar(m);
                    }
                    /*
                                    if ( !m.InRange( Caster, 2 ) )
                                        damage *= 0.25; // 1/4 damage at > 2 tile range
                                    else if ( !m.InRange( Caster, 1 ) )
                                        damage *= 0.50; // 1/2 damage at 2 tile range
                    */
                    if (Core.AOS)
                    {
                        m.FixedParticles(0x374A, 10, 30, 5013, 1153, 2, EffectLayer.Waist);
                        m.PlaySound(0x0FC);
                    }
                    else
                    {
                        m.FixedParticles(0x374A, 10, 15, 5013, EffectLayer.Waist);
                        m.PlaySound(0x1F1);
                    }

                    SpellHelper.Damage(this, m, damage, 0, 0, 100, 0, 0);
                }
            }

			FinishSequence();
		}
        private static void OldHarm(Mobile m)
        {

        }

        private class KinTimer : Timer
        {
            Mobile m_Cleric;
            Mobile m_Targ;
            int RunCount;
            int Damage;

            public KinTimer(Mobile from, Mobile targ, int duration, int damage)
                : base(TimeSpan.FromSeconds(1))
            {
                Damage = damage;
                m_Cleric = from;
                m_Targ = targ;
                RunCount = duration;
            }
            protected override void OnTick()
            {
                if (m_Cleric == null)
                    return;
                if (m_Targ == null)
                    return;
                if (!m_Targ.Alive)
                    this.Stop();

                
                m_Targ.Damage(Damage,m_Cleric);

                RunCount -= 1;
                if (RunCount > 0)
                {
                    Timer m_Timer = new KinTimer(m_Cleric, m_Targ, RunCount, Damage);
                    m_Timer.Start();
                }
            }
        }

        private class SaerTimer : Timer
        {
            Mobile m_Targ;
            ResistanceMod m_Mod;

            public SaerTimer(Mobile targ, ResistanceMod mod)
                : base(TimeSpan.FromSeconds(15))
            {
                m_Targ = targ;
                m_Mod = mod;
            }
            protected override void OnTick()
            {
                if (m_Targ == null)
                    return;

                m_Targ.RemoveResistanceMod(m_Mod);
            }
        }

		private class InternalTarget : Target
		{
			private HarmSpell m_Owner;

			public InternalTarget( HarmSpell owner ) : base( 12, false, TargetFlags.Harmful )
			{
				m_Owner = owner;
			}

			protected override void OnTarget( Mobile from, object o )
			{
				if ( o is Mobile )
				{
					m_Owner.Target( (Mobile)o );
				}
			}

			protected override void OnTargetFinish( Mobile from )
			{
				m_Owner.FinishSequence();
			}
		}

        private class InternalLlothTarget : Target
        {
            private HarmSpell m_Owner;

            public InternalLlothTarget(HarmSpell owner)
                : base(3, false, TargetFlags.Harmful)
            {
                m_Owner = owner;
            }

            protected override void OnTarget(Mobile from, object o)
            {
                if (o is Mobile)
                {
                    m_Owner.Target((Mobile)o);
                }
            }

            protected override void OnTargetFinish(Mobile from)
            {
                m_Owner.FinishSequence();
            }
        }
	}
}